package main

import (
	"flag"
	"fmt"
	"os"
	"passgen/pkg/subcommands"
)

func main() {
	flag.Usage = func() { fmt.Println(usage) }

	if len(os.Args) < 2 {
		fmt.Println("It is necessary at least a subcommand to continue. Type 'passgen --help' so you can see the available subcommands and flags.")
		os.Exit(1)
	}

	switch os.Args[1] {
	case "generate":
		subcommands.Generate()

	case "encrypt":
		subcommands.Encrypt()

	case "decrypt":
		subcommands.Decrypt()

	default:
		flag.Parse()
		fmt.Printf("%q is not a valid command. Check the available subcommands by using 'passgen --help' and try again, please.\n", os.Args[1])
	}
}

const usage = `passgen is a tool for password generation. You can quickly generate a random password with any length, write it to a file and encrypt it using sha256 cryptography. After encrypting the file, you can use the key generated by the encryption to decrypt it if necessary.

Usage:
  passgen <command> [flags]

Commands Usage:
	passgen generate [flags]

		Options:
			-l, --length      INT   (optional) the password length you want to generate. The default length is 8 characters.
			-o, --output-file      PATH  (optional) the path to file where you want to generate it


	passgen encrypt (-f PASSWORD_FILE_PATH | --file PASSWORD_FILE_PATH) (-n ENCRYPTED_FILE_PATH | --name ENCRYPTED_FILE_NAME)

		Options:
			-f, --raw-file        PATH  (required) the password file you want to encrypt
			-o, --output-file     PATH  (required) the encrypted file name


	passgen decrypt (-f PASSWORD_FILE_PATH | --file PASSWORD_FILE_PATH) (-k KEY_FILE_PATH | --key KEY_FILE_PATH)

		Options:
			-f, --encrypted-file  PATH  (required) the password file you want to decrypt
			-k, --key-file        PATH  (required) the key to decrypt the file. The key file is generated right after the encryption is completed`
